import os
import gradio as gr
import requests
from dotenv import load_dotenv

load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent"

# Headers for Gemini API
headers = {
    "Content-Type": "application/json",
    "x-goog-api-key": GEMINI_API_KEY
}

# Conversation history per session
chat_history = []

def generate_reply(user_input):
    chat_history.append({"role": "user", "parts": [{"text": user_input}]})


    body = {
        "contents": chat_history,
        "generationConfig": {
            "temperature": 0.7,
            "topK": 1,
            "topP": 1,
            "maxOutputTokens": 1024,
        }
    }

    response = requests.post(GEMINI_URL, headers=headers, json=body)

    if response.status_code == 200:
        result = response.json()
        reply = result["candidates"][0]["content"]["parts"][0]["text"]
        chat_history.append({"role": "model", "parts": [{"text": reply}]})

        return reply
    else:
        return f"Error {response.status_code}: {response.text}"

# Gradio interface
demo = gr.Interface(
    fn=generate_reply,
    inputs=gr.Textbox(label="Ask FiberAgent", placeholder="Ask anything about fiber optics..."),
    outputs=gr.Textbox(label="Response"),
    title="Fiber Optic Agent (Gemini 2.5 Flash)",
    description="Powered by Google Gemini 2.5 Flash. Ask questions related to fiber optics.",
)

if __name__ == "__main__":
    demo.launch(share=True)
